package com.platformcommons.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.platformcommons.Entities.Course;
import com.platformcommons.Entities.Student;
import com.platformcommons.Exceptions.StudentExceptions;
import com.platformcommons.Models.StudentDTO;
import com.platformcommons.Services.StudentService;

import jakarta.persistence.EntityNotFoundException;

@RestController
@RequestMapping("/student")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @PutMapping("/{studentId}")
    public ResponseEntity<Student> updateStudentProfile(@PathVariable Long studentId,
                                                       @RequestBody StudentDTO updatedStudent) {
        try {
            Student updatedStudentProfile = studentService.updateStudentProfile(studentId, updatedStudent);
            return ResponseEntity.ok(updatedStudentProfile);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/{studentId}/courses")
    public ResponseEntity<List<Course>> getAssignedCourses(@PathVariable Long studentId) {
        try {
            List<Course> assignedCourses = studentService.getAssignedCourses(studentId);
            return ResponseEntity.ok(assignedCourses);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{studentId}/courses/{courseId}")
    public ResponseEntity<String> leaveCourse(@PathVariable Long studentId, @PathVariable Long courseId) throws StudentExceptions {
        try {
            studentService.leaveCourse(studentId, courseId);
            return ResponseEntity.ok("Course left successfully");
        } catch (StudentExceptions e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Error: " + e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error: " + e.getMessage());
        }
    }

}
