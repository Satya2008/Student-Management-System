package com.platformcommons.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.platformcommons.Entities.Course;
import com.platformcommons.Entities.Student;
import com.platformcommons.Models.CourseDTO;
import com.platformcommons.Models.StudentAddressDTO;
import com.platformcommons.Models.StudentDTO;
import com.platformcommons.Services.AdminService;
import com.platformcommons.Services.StudentService;

import jakarta.persistence.EntityNotFoundException;

@RestController
@RequestMapping("/admin")
public class AdminController {
    
	@Autowired
	private AdminService adminService;
	
	@Autowired
	private StudentService studentService;
	
	 @PostMapping("/admitStudent")
	    public ResponseEntity<Student> admitStudent(@RequestBody StudentDTO studentDTO) {
	        Student admittedStudent = adminService.admitStudent(studentDTO);
	        return ResponseEntity.ok(admittedStudent);
	    }
	 
	 @PostMapping("/addMoreAddress/{studentId}")
	    public ResponseEntity<Student> addMoreAddressOfStudent(
	            @PathVariable Long studentId,
	            @RequestBody StudentAddressDTO studentAddressDTO
	    ) {
	        Student updatedStudent = adminService.addAddressOfstudent(studentId, studentAddressDTO);
	        return ResponseEntity.ok(updatedStudent);
	    }
	 
	 @GetMapping("/byName")
	    public ResponseEntity<List<Student>> getStudentsByName(@RequestParam String studentName) {
	        List<Student> students = adminService.getStudentsByName(studentName);
	        return ResponseEntity.ok(students);
	    }
	 
	 @PostMapping("/uploadCourse")
	    public ResponseEntity<Course> uploadCourse(@RequestBody CourseDTO courseDTO) {
	        Course uploadedCourse = adminService.uploadCourse(courseDTO);
	        return new ResponseEntity<>(uploadedCourse, HttpStatus.CREATED);
	    }

	    @PostMapping("/{studentId}/assignCourse")
	    public ResponseEntity<String> assignCourseToStudent(
	            @RequestParam Long studentId,
	            @RequestParam Long courseId) {
	        try {
	            adminService.assignCoursesToStudent(studentId, courseId);
	            return new ResponseEntity<>("Course assigned to student successfully", HttpStatus.OK);
	        } catch (EntityNotFoundException e) {
	            return new ResponseEntity<>("Error: " + e.getMessage(), HttpStatus.NOT_FOUND);
	        } catch (Exception e) {
	            return new ResponseEntity<>("Error: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
}
